
# water ripples effect based on an algorithm from Acorn User Magazine https://archive.org/details/AcornUser1992Magazine/AcornUser9208/page/n67/mode/2up

option "vsize" * 1024 128
startgraphics 640 512

while && ! mouseb ! keypressed 65
 if expose
  cls
  drawscaledtext 120 10 4 5 "'CementMagic'"
  drawscaledtext 90 50 2 3 "  a water surface simulation"
  drawtext 10 120 1 "Based on an article from Acorn User Magazine, August '92,"
  drawtext 10 140 1 "attributed to Michel Grimminck."
  drawtext 10 170 1 "Click on the surface to create ripples."
  drawtext 10 300 1 "Press SPACE or click mouse to continue"
 endif
 wait 32
endwhile
cls

refreshmode 1

variable rr gg bb;
set rr alloc 4
set gg alloc 4
set bb alloc 4

set Arr(0) 255
set Agg(0) 128
set Abb(0) 0

set Arr(1) 0
set Agg(1) 0
set Abb(1) 128

set Arr(2) 0
set Agg(2) 255
set Abb(2) 0

set Arr(3) 64
set Agg(3) 64
set Abb(3) 255

variable  
#st stm2 stm3 std2 s r h
a b c d xymul;

constant st 48;
constant adjvv * -7 / 64 st
variable adjv;
constant stm2 - st 2
constant stm3 - st 3
constant std2 / st 2
constant r 480
constant s / r st
constant m 32
constant h 96

variable xa ya i j x y _X _Y ox oy l aayaij aayai1j aayaij1 aayai1j1 aaxai1j aaxaij1 xp yp xd yd dis;
set xa alloc st
set ya alloc st
for i 0 - st 1;
 set Axa(i) alloc st
 set Aya(i) alloc st
endfor

constant wh st
constant whm1 - wh 1

variable heights velocities v;

constant friction * 0.03 / 64 st
constant frictionv - 1 friction
constant tension * 0.25 / 64 st

set heights alloc wh;
set y 0
while < y wh
 set Aheights y   alloc wh
 set y + y 1 
endwhile
set velocities alloc wh
set y 0
while < y wh
 set Avelocities y  alloc wh
 set y + y 1
endwhile

#set AAheights std2 std2 10

while 1
 set _X / r 3
 set _Y + winh r 32
 set ox _X
 set oy _Y


 REM process velocities
 for x 1 - wh 2;
  for y 1 - wh 2;
   set AAvelocities x y
        * frictionv
           - AAvelocities x y
             * tension
                 - (* 4 AAheights x y )
                   AAheights(- x 1)   y  
                   AAheights(+ x 1)   y  
                   AAheights   x   (- y 1)
                   AAheights   x    + y 1
  endfor
 endfor

 REM process heights
 for x 1 - wh 2;
  for y 1 - wh 2;
   set AAheights x y   + AAheights x y   AAvelocities x y
  endfor
 endfor

 # Calculate x/y points

 set xymul fnmin (/ winw 1280) / winh 1024
 set adjv * adjvv xymul
 for j 0 - st 2;
  for i 0 - st 2;
   set AAxa i j  * xymul + _X * s i
   set AAya i j  * xymul + neg winh (+ _Y * s i) * m 8 + AAheights i j  AAheights(+ i 1 ) j   AAheights i (+ j 1)  AAheights(+ i 1) + j 1
  endfor
  set _X + _X s
  set _Y - _Y s
 endfor

 # Render quads

 for j (- st 3) 2 -1;
  for i 0 - st 3;

   set aaxai1j   AAxa(+i 1)j
   set aaxaij1	 AAxa i + j 1
 
   set aayai1j1  AAya(+i 1) +j 1
   set aayai1j   AAya(+i 1) j
   set aayaij1   AAya i +j 1
   set aayaij    AAya i j

   procc aayaij aayai1j aayaij1 aayai1j1

   triangle    AAxa i j			aayaij
               aaxai1j			aayai1j
               aaxaij1			aayaij1
   triangle    aaxaij1			aayaij1
               AAxa(+ i 1)(+ j 1)	aayai1j1
               aaxai1j			aayai1j

  endfor # i
 endfor #j

 if mouseb

  set xp  * xymul + r -16 / r 3
  set yp  * xymul + r 16

  set xd  - xp mousex 
  set yd  - yp mousey 

  set xd  / xd * xymul / r wh
  set yd neg  / yd * xymul / r wh

  set dis sqr + (* xd xd ) * yd yd
  set a + 0.785398 atan2 yd xd

  ;mouseaction (- std2 * 0.75 dis cos a) (- std2 * 0.75 dis sin a) 5
 endif

 refresh
 wait 16.6
 cls

 # end main loop
endwhile

function fnmin a b; 
 if > a b
  return b
 endif
return a

function fnmax a b; 
 if < a b
  return b
 endif
return a

function procc y0 y1 y2 y3 local min max;
 set y0 + y0 adjv
 set y1 + y1 adjv
 set min fnmin fnmin y0 y1 fnmin y2 y3
 set max / 1 + neg min fnmax fnmax y0 y1 fnmax y2 y3
 set a * max - y0 min
 set b * max - y1 min
 set c * max - y2 min
 set d * max - y3 min
 gcol (fnmin 255 + (* a Arr 0) (* b Arr 1) (* c Arr 2) * d Arr 3)
      (fnmin 255 + (* a Agg 0) (* b Agg 1) (* c Agg 2) * d Agg 3)
       fnmin 255 + (* a Abb 0) (* b Abb 1) (* c Abb 2) * d Abb 3
endfunction

function mouseaction x y r local xx yy d h;
 set xx - x r
 while < xx + x r
  set yy - y r
  while < yy + y r
   set d  sqr + pow(- xx x)2 pow(- yy y)2
   if < d r
    set h * 0.2 - 1 / d r
    if && > xx 1 > yy 1 < xx whm1 < yy whm1
     if < AAheights xx yy h
      set AAheights xx yy h
     endif
    endif
   endif
   set yy + yy 1
  endwhile 
  set xx + xx 1
 endwhile 
endfunction