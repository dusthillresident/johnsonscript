
# water ripples effect based on an algorithm from Acorn User Magazine https://archive.org/details/AcornUser1992Magazine/AcornUser9208/page/n67/mode/2up

option "vsize" * 1024 128
startgraphics << 640 1 << 512 1

refreshmode 1

variable rr gg bb;
set rr alloc 4
set gg alloc 4
set bb alloc 4

set Arr(0) 255
set Agg(0) 128
set Abb(0) 0

set Arr(1) 0
set Agg(1) 0
set Abb(1) 128

set Arr(2) 0
set Agg(2) 255
set Abb(2) 0

set Arr(3) 64
set Agg(3) 64
set Abb(3) 255

variable p ps m st stm2 std2 r s h a b c d xymul;

set p 0
set ps 0.1
set m 32
set st 64
constant adjv * -7 / 64 st
set stm2 - st 2
set std2 / st 2
set r 480
set s / r st
set h 96

variable xa ya i j x y _X _Y ox oy l aayaij aayai1j aayaij1 aayai1j1 xp yp xd yd dis;
set xa alloc st
set ya alloc st
set i 0
while < i st
 set Axa(i) alloc st
 set Aya(i) alloc st
 set i + i 1
endwhile

constant wh st;
constant shift 3;

variable heights velocities v oxp oyp;

constant friction * 0.03 / 64 st;
constant frictionv - 1 friction;
constant tension * 0.25 / 64 st;

set heights alloc wh;
set y 0
while < y wh
 set Aheights(y) alloc wh
 set y + y 1 
endwhile
set velocities alloc wh
set y 0
while < y wh
 set Avelocities(y) alloc wh
 set y + y 1
endwhile

while 1
 set _X / r 3
 set _Y + winh r 32
 set ox _X
 set oy _Y


 REM process velocities
 set x 1
 while < x - wh 1
  set y 1
  while < y - wh 1
   set AAvelocities(x)(y)
        * frictionv
          (
           - AAvelocities(x)(y)
             * tension
               ( - (* 4 AAheights(x)(y))
                   AAheights(- x 1)(  y  )
                   AAheights(+ x 1)(  y  )
                   AAheights(  x  )(- y 1)
                   AAheights(  x  )(+ y 1)
               )
          )
   set y + y 1
  endwhile
  set x + x 1
 endwhile

 REM process heights
 set x 1
 while < x - wh 1
  set y 1
  while < y - wh 1
   set AAheights(x)(y) + AAheights(x)(y) AAvelocities(x)(y)
   set y + y 1
  endwhile
  set x + x 1
 endwhile

 # Calculate x/y points

 set j 0
 while < j - st 1
  set i 0
  while < i - st 1
   set AAxa(i)(j) (+ _X * s i)
   set AAya(i)(j) (+ neg winh (+ _Y * s i) * m (+ AAheights(i)(j) AAheights(+ i 1 )(j) AAheights(i)(+ j 1) AAheights(+ i 1)(+ j 1) ) 8  )
   set i +  i 1
  endwhile
  set _X + _X s
  set _Y - _Y s
  set j + j 1
 endwhile

 # Render quads

 set xymul fnmin (/ winw 1280) (/ winh 1024)

 set j - stm2 1
 while > j 1
  set i 0
  while < i stm2


   set aayaij    AAya i j
   set aayai1j   AAya(+i 1) j
   set aayaij1   AAya i +j 1
   set aayai1j1  AAya(+i 1) +j 1;

   procc aayaij aayai1j aayaij1 aayai1j1

   triangle   (* xymul AAxa i j)          (* xymul  aayaij)
              (* xymul AAxa(+i 1)j)       (* xymul  aayai1j)
              (* xymul AAxa i (+j 1))     (* xymul  aayaij1)
   triangle   (* xymul AAxa i (+j 1))     (* xymul  aayaij1)
              (* xymul AAxa(+ i 1)(+j 1)) (* xymul  aayai1j1)
              (* xymul AAxa(+i 1)j)       (* xymul  aayai1j)

   #refresh wait 16.6

   set i + i 1
  endwhile
  set j - j 1
 endwhile

 if mouseb

  set xp (* xymul + r -16 / r 3)
  set yp (* xymul + r 16)

  set xd (- xp mousex )
  set yd (- yp mousey )

  # gcol 0xff0000;  circlef xp yp 5;  circle (- xp xd) (- yp yd) 5

  set xd (/ xd (* xymul / r wh))
  set yd neg (/ yd (* xymul / r wh))

  set dis sqr + (* xd xd ) * yd yd

  set xp - >> wh 1 * 0.75 dis cos + 0.785398 atan2 yd xd
  set yp - >> wh 1 * 0.75 dis sin + 0.785398 atan2 yd xd

  #print "d:" xd ", " yd;
  #print "p:" xp ", " yp;
  

  #if ! && = oxp xp = oyp yp
   if && > xp 0 > yp 0 < xp (- wh 1) < yp (- wh 1)
    set AAheights(xp)(yp) 0.4
    set AAheights(-xp 1)(yp) 0.3
    set AAheights(xp)(-yp 1) 0.3
    set AAheights(+xp 1)(yp) 0.3
    set AAheights(xp)(+yp 1) 0.3
   endif
  #endif
  set oxp xp
  set oyp yp
 endif

 refresh
 wait 8.3
 cls

 set p + p ps
 
 # end main loop
endwhile

function fnmin a b; return A@a > a b

function fnmax a b; return A@a < a b

function fnc rgb; return fnmin 255 + (* a Argb 0) (* b Argb 1) (* c Argb 2) (* d Argb 3) 

function procc y0 y1 y2 y3 local min max;
 set y0 + y0 adjv
 set y1 + y1 adjv
 set min fnmin fnmin y0 y1 fnmin y2 y3
 set max + neg min fnmax fnmax y0 y1 fnmax y2 y3
 set a / (- y0 min) max
 set b / (- y1 min) max
 set c / (- y2 min) max
 set d / (- y3 min) max
 gcol fnc rr fnc gg fnc bb
endfunction