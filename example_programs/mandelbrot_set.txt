REM 
/*
  --------------------
  -- Mandelbrot set --
  --------------------
  Adapted from https://www.rosettacode.org/wiki/Mandelbrot_set#BBC_BASIC
*/

constant maxiter 256;

startgraphics 800 800;
option "wintitle" "Mandelbrot Set"
variable i titlex titley;

refreshmode 1
while ! mouseb
 wait 17
 if expose;
  set titlex - >> winw 1 >> 470 1
  set titley - >> winh 1 >> 161 1
  gcol -1
  cls
  drawscaledtext (+ titlex 10) (+ titley 10) 4 4	"Mandelbrot Set"
  drawtext (+ titlex 16) (+ titley 55) 1		"Click and drag on any part of the image to zoom in."
  drawtext (+ titlex 16) (+ titley 75) 1		"You can use the mouse wheel to zoom too."
  drawtext (+ titlex 16) (+ titley 95) 1		"Right-click on an area to centre the view on that point."
  gcol 0xff7f40
  drawtext (+ titlex 16) (+ titley 135) 1		"Click mouse to begin"
  refresh
 endif;
endwhile;
while mouseb
endwhile
refreshmode 0
cls

variable _X _Y _I xi yi x y xt;
variable currentColour lastY;
variable zoomlevel viewxoffset viewyoffset w h d1zoomlevel lastzoomlevel oldwinw oldwinh omz m;

set zoomlevel * 0.25 + (/ winw 800) (/ winh 800)

set viewyoffset * (/ 1 zoomlevel) neg (/ winh 2)

set oldwinw winw
set oldwinh winh

constant whm / 1 * 800 0.6666666666666666;
.start

if ! && = winw oldwinw = winh oldwinh
 set zoomlevel * zoomlevel 0.5 + (/ winw oldwinw) / winh oldwinh
 set oldwinw winw
 set oldwinh winh
endif

set d1zoomlevel / 1 zoomlevel;

# =================
# === Main loop ===
# =================

set omz mousez
quickpreview

for _X 0 - winw 1;

 set xi + -2 * whm + viewxoffset * _X d1zoomlevel
 set lastY 0
 set currentColour 0

 for _Y 0 winh;

  set yi * whm + viewyoffset * _Y d1zoomlevel
  set x 0
  set y 0

  for _I 1 maxiter;

   if < 5 + (* x x) * y y
    endloop
   endif

   set xt  + xi (* x x) neg * y y
   set y  + yi * 2 x y
   set x  xt

  endfor

  if > _I maxiter
   set _I 0
  endif

  if ||  ! = _I currentColour  = _Y winh ;
   gcol fncol * 0.0625 currentColour;
   set currentColour _I
   line _X lastY _X _Y
   set lastY _Y
  endif

 endfor # _Y

 if expose
  wait 100
  #cls
  goto ".start"
 endif

 if || mouseb != mousez omz
  endloop
  .keepgoing
 endif
 
endfor # _X

# ==========================
# === User mouse control ===
# ==========================

while keybuffer
 if readkey endif
endwhile

while 1

 # LEFT MOUSE BTN - ZOOM RECTANGLE 
 if & mouseb 1

  set x mousex
  set y mousey
  gcol -1
  drawmode 10

  while mouseb
   set w - mousex x
   set h - mousey y
   if > abs w abs h
    set h * sgn h winh / abs w winw
   else
    set w * sgn w winw / abs h winh
   endif
   rectangle x y w h
   wait 34
   rectangle x y w h
  endwhile
  if < w 0
   set x + x w
   set w neg w
  endif
  if < h 0
   set y + y h
   set h neg h
  endif

  drawmode 3
 
  if || < w 2 < h 2
   goto ".keepgoing"
  endif

  set viewxoffset  (+ viewxoffset * x / 1 zoomlevel) 
  set viewyoffset  (+ viewyoffset * y / 1 zoomlevel)   
  set zoomlevel * zoomlevel (/ winw w )
 
  #cls
  goto ".start"
 endif

 # MIDDLE MOUSE BTN - ZOOM OUT
 if ||(& mouseb 2) != mousez omz
  set lastzoomlevel zoomlevel
  if != mousez omz
   set m - 1 * -0.1 sgn(- mousez omz)
  else
   set m 0.9
  endif
  for i 0 abs(- mousez omz);
  set zoomlevel * zoomlevel m
  set viewxoffset - (+ viewxoffset * (* winw 0.5 m) / 1 lastzoomlevel) (* winw 0.5 / 1 lastzoomlevel)
  set viewyoffset - (+ viewyoffset * (* winh 0.5 m) / 1 lastzoomlevel) (* winh 0.5 / 1 lastzoomlevel)
  set lastzoomlevel zoomlevel
  endfor
  #set viewxoffset + viewxoffset * viewxoffset 0.25
  while mouseb
  endwhile
  set viewxoffset + (* 0.3 (- (+ viewxoffset * mousex / 1 zoomlevel) (*(>>winw 1)/ 1 zoomlevel))) * 0.7 viewxoffset
  set viewyoffset + (* 0.3 (- (+ viewyoffset * mousey / 1 zoomlevel) (*(>>winh 1)/ 1 zoomlevel))) * 0.7 viewyoffset
  #cls
  goto ".start"
 endif

 # RIGHT MOUSE BTN - SET POSITION
 if & mouseb 4
  set viewxoffset - (+ viewxoffset * mousex / 1 zoomlevel) (*(>>winw 1)/ 1 zoomlevel)
  set viewyoffset - (+ viewyoffset * mousey / 1 zoomlevel) (*(>>winh 1)/ 1 zoomlevel)
  while mouseb
  endwhile
  #cls
  goto ".start"
 endif

 if expose
  #cls
  goto ".start"
 endif

 wait 32;
endwhile;
goto ".start"


function fncol v local iv rgb ;
 set iv int v
 set v - v iv
 if & iv 1
  set v - 1 v
 endif
 set rgb @ "RGB"
 set C$rgb 0  int * v 255
 if < v 0.5 
  set C$rgb 1  0
 else
  set C$rgb 1  int * v 510 - v 0.5
 endif
 set C$rgb 2  int * v v v v v v v v 255
return | <<(C$rgb % iv 3)16  <<(C$rgb %(+ iv 1)3)8  (C$rgb %(+ iv 2)3)



function ffff _X _Y local xi yi x y _I xt;
 set xi + -2 * whm + viewxoffset * _X d1zoomlevel
 set yi * whm + viewyoffset * _Y d1zoomlevel
 set x 0
 set y 0
 for _I 1 maxiter;
  if < 5 + (* x x) * y y
   endloop
  endif
  set xt  + xi (* x x) neg * y y
  set y  + yi * 2 x y
  set x  xt
  endfor
  if > _I maxiter
   return 0
  endif
return _I

function quickpreview local x y;
 for x 0 (- winw 1) 24;
  for y 0 (- winh 1) 24;
   gcol  fncol * 0.0625 ffff x y
   rectanglef x y 24
   if != omz mousez endfunction endif
  endfor
 endfor
endfunction
