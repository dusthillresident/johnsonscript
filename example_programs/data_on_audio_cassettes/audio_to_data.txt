initCmdArgs;

stringvar sucks originalFilepath fileBasename fileData;
variable fin fout av frames amplitude side lastSamp threshold exitOnDataError dataError forceExtraRead;
set exitOnDataError 1
set forceExtraRead  cmdOption @"-extraread" -1

constant debugMessages cmdArgIsUsed @"-debugmsgs";

#  Lowpass strength
constant lowpassStrength - 1 (cmdOption @"-lps" 0.476);
constant lpv - 1 lowpassStrength;
variable lowpassState;

#  Highpass strength
constant highpassStrength cmdOption @"-hps" 0.291;
constant hpv - 1 highpassStrength;
variable highpassState;

#  Adaptation strength
constant adaptationStrength cmdOption @"-ads" 0.24;
constant adpv - 1 adaptationStrength;

#  Zero-point adjustment strength
constant avAdjustmentStrength cmdOption @"-avs" 0.0577
constant avv - 1 avAdjustmentStrength

cmdArgSetDescription @"-hps" @"High pass filter strength. From 0.0 minimum to 1.0 maximum";
cmdArgSetDescription @"-ads" @"Adaptation strength. 0.0 minimum, 1.0 maximum";
cmdArgSetDescription @"-avs" @"Zero-point adjustment strength. 0.0 minimum, 1.0 maximum";
cmdArgSetDescription @"-extraread" @"Forces enabling or disabling of calibration extra read. 0 to force disabled, 1 to force enabled";
cmdArgsDisplayHelp;

#if ! _argc
 set fin _stdin
#else
# set fin openin $0
# if ! fin
#  sput _stderr "cant open file" chr$10
#  quit 1
# endif
#endif


begin;

function lowpassFilter v;
 set lowpassState + (* v lowpassStrength) (* lowpassState lpv)
return lowpassState

function highpassFilter v;
 set highpassState + (* v highpassStrength) (* highpassState hpv)
return - v highpassState

function getSamp local b blah;
 set b bget fin
 #set blah bget fin
 if < b 0
  sput _stderr "getSamp: unexpected eof" chr$10;
  failMsg
  quit 1
 endif
 set b >> << b 24 24
 set b highpassFilter b
 set b lowpassFilter b
 set av + (* av avv) * b avAdjustmentStrength
 set lastSamp b
return b

function max a b;
 if > a b
  return a
 endif
return b

function read local n;
 set n av;
 set frames 0;
 while ^ side > getSamp av 
  increment frames
  set n  max  abs n  abs lastSamp
 endwhile
 set side ! side
 set n - n av
 set amplitude n
 #if debugMessages
 # set sucks cat$ "frames: " str$ frames "	amplitude: " str$ amplitude; dbgmsg @sucks;
 #endif
return n;

function readBit_;
return > read threshold

function readBit local result;
 read
 set result > read threshold
 if result
  set threshold + (* amplitude 0.74  adaptationStrength) * threshold adpv
 else
  set threshold + (* amplitude 1.7  adaptationStrength) * threshold adpv
 endif
 if debugMessages
  set sucks cat$ "readBit result: " str$ result "	threshold: " str$ threshold "	av: " str$ av  "	amplitude: " str$ amplitude; dbgmsg @sucks;
 endif
return result

function readByte local out i;
 set out 0
 for i 0 7;
  set out >> out 1
  set out | out << readBit 7
 endfor
return out

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function specialCalibration local a b i v d1 d2 oa ob;
 set d1 0
 set d2 0
 set a read
 set b read
 for i 3 64;
  set oa a; set a read;
  set ob b; set b read;
  set d1 + d1 abs - oa a
  set d2 + d2 abs - ob b
 endfor
 print "d1: " d1;
 print "d2: " d2;
 if || (&& (= forceExtraRead -1) > d1 d2) forceExtraRead;
  sput _stderr "calibration: performing extra read" chr$10;
  read
 endif
 read read read read

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function begin local beginCode oldFrames oldAmp i;
 .retry
 if debugMessages
  dbgmsg @"listening for the silence to end";
 endif
 while < abs lastSamp 35;
  getSamp
 endwhile
 for i 1 40;
  read
 endfor
 set threshold 0
 for i 1 44;
  set threshold + threshold read
 endfor
 set threshold / threshold 44
 if debugMessages
  dbgmsg @"starting to listen for the start bit";
 endif
 while > amplitude threshold;
  set threshold + (* threshold 0.99) * read 0.74 0.01;
  read
 endwhile
 specialCalibration;
 while | readBit readBit readBit
 endwhile
 while ! readBit
 endwhile
 set beginCode readByte
 if != 54 beginCode
  sput _stderr "failed to begin, got: " str$ beginCode chr$10;
  failMsg
  quit 1
 endif
 
 readData @fileBasename;
 readData @originalFilepath;
 print "File: " fileBasename;
 print "Original filepath: " originalFilepath;
 set exitOnDataError 0
 readData @fileData;
 set fout openout "recovered_file"
 sput fout fileData
 close fout;
 if dataError
  failMsg; quit 1
 else
  print (cat$ chr$ 0x1b "[" str$ (+ 30 62) "m") "OK"
 endif

 oscli "tput init"
 quit

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function chksum data local i sum;
 set sum 0x179ab2ef
 set i 0
 while < i len$ $data
  set sum  ^  >> sum 13  << sum 7   C$data(i)
  set sum  ^  >> sum 1   << sum 30  0xe91bf2c1 ~sum
  increment i
 endwhile
return sum

function readNumber_ local i result;
 set result 0
 for i 0 3;
  set result >>> result 8
  set result | result << readByte 24
 endfor
return result

function readNumber local result b;
 set result readNumber_
 set b readNumber_
 if != b result
  sput _stderr "number failed to read back successfully: " str$ result " " str$ b chr$10;
  failMsg
  quit 1
 endif
return result

function readData dataReturn local i sum len;
 set sum readNumber
 set len readNumber
 set $dataReturn  string$ len chr$ 0
 set i 0
 while < i len
  set C $dataReturn i  readByte
  increment i
 endwhile
 if != sum chksum dataReturn
  sput _stderr "data failed to read back successfully" chr$10;
  if exitOnDataError
   failMsg
   quit 1
  else
   set dataError 1
  endif
 endif
endfunction

function failMsg;
sput _stderr (cat$ chr$ 0x1b "[" str$ (+ 30 61) "m") "Failure" chr$10
oscli "tput init"

function dbgmsg msg;
#endfunction
sput _stderr $ msg chr$10

# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------

function initCmdArgs;
 stringvar _cmdArgDatabase;

function cmdArgsDisplayHelp local i;
 defineCmdArg @"-help" @"" -1 @"Displays the help message";
 if ! cmdArgIsUsed @"-help"
  endfunction
 endif
 sput _stderr "---- Command line options ----" chr$10 chr$10;
 set i 0
 while < i vlen$ _cmdArgDatabase;
  sput _stderr " " ($V$V_cmdArgDatabase(i)(0)) chr$10
  caseof (V$V_cmdArgDatabase(i)(1));
   when 0;
    sput _stderr "  Expects parameter:" chr$10 "   number" chr$10
   when 1;
    sput _stderr "  Expects parameter:" chr$10 "   string" chr$10
  endcase
  if cmp$ ($V$V_cmdArgDatabase(i)(4)) ""
   sput _stderr "  Description:" chr$10 "   " ($V$V_cmdArgDatabase(i)(4)) chr$10
  endif
  caseof (V$V_cmdArgDatabase(i)(1));
   when 0;
    sput _stderr "  Default value:" chr$10 "   "
    sput _stderr str$(V$V_cmdArgDatabase(i)(3)) chr$10
   when 1;
    if cmp$ ($V$V_cmdArgDatabase(i)(2)) ""
     sput _stderr "  Default value:" chr$10 "   "
     sput _stderr ($V$V_cmdArgDatabase(i)(2)) chr$10
    endif
   otherwise
    #sput _stderr "oh no" chr$10
  endcase
  sput _stderr chr$10
  increment i
 endwhile
 quit

function cmdArgSetDescription argument description local i;
 set i 0
 while < i vlen$ _cmdArgDatabase;
  if ! cmp$  $V$V_cmdArgDatabase(i)(0) $argument
   set V$V_cmdArgDatabase(i)(4) description
   endfunction
  endif
  increment i
 endwhile

function defineCmdArg argument default type description local i defv;
 set i 0
 while < i vlen$ _cmdArgDatabase;
  if ! cmp$  $V$V_cmdArgDatabase(i)(0) $argument
   endfunction
  endif
  increment i
 endwhile
 if = type 0
  set defv @""
  set $defv str$ default
  set default defv
 endif
 append$ _cmdArgDatabase vector$ (S vector$ (S $argument) type (S $default) (val$ $default) description)

function cmdArgIsUsed argument local i;
 defineCmdArg argument @"" -1 @""
 for i 0 + -1 _argc;
  if ! cmp$ $i $argument
   return 1
  endif
 endfor
return 0

function cmdOptionStr argument default local i;
 defineCmdArg argument default 1 @"";
 for i 0 + -1 _argc;
  if && (< i - _argc 1) ! cmp$ $i $argument
   return + i 1
  endif
 endfor
return default

function cmdOption argument default local d v;
 defineCmdArg argument default 0 @"";
 set d @""
 set v cmdOptionStr argument d
 if = v d
  return default
 endif
return val$ $v