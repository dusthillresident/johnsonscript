#!/usr/bin/env gfxbin
initCmdArgs;
variable fin;   set fin _stdin
if cmp$ "" $ cmdOptionStr @"-file" @""
 set fin openin $ cmdOptionStr @"-file" @""
 if ! fin
  sput _stderr "Couldn't open input file" chr$ 10;
  quit 1
 endif
endif

stringvar sucks originalFilepath fileBasename fileData;
variable fout av frames amplitude side lastSamp threshold exitOnDataError dataError forceExtraRead inputFormat needToSkipWavHeader writeToStdout _writeToStdout saveSignal ssfp sampleCounter quietMode silentMode;
set exitOnDataError 1
set forceExtraRead  cmdOption @"-extraread" -1

constant debugMessages cmdArgIsUsed @"-debugmsgs";
set saveSignal cmdArgIsUsed @"-record"
if saveSignal
 set ssfp openout cat$ "recorded_signal_" str$ rnd 1000000 str$ rnd 1000000 ".raw"
endif

set writeToStdout cmdArgIsUsed @"-stdout";
if writeToStdout
 option "unbuffered" _stdin
 option "unbuffered" _stdout
endif

constant sampleRate cmdOption @"-r" 48000;
set quietMode cmdArgIsUsed @"-quiet";
set silentMode cmdArgIsUsed @"-silent";
if silentMode
 set quietMode 1
endif
#  Lowpass strength
constant lowpassStrength - 1 (cmdOption @"-lps" 0.6424693456257908);
constant lpv - 1 lowpassStrength;
variable lowpassState;

#  Highpass strength
constant highpassStrength cmdOption @"-hps" 0.2574568466318752;
constant hpv - 1 highpassStrength;
variable highpassState;

#  Adaptation strength
constant adaptationStrength cmdOption @"-ads" 0.18177523314154192;
constant adpv - 1 adaptationStrength;

#  Zero-point adjustment strength
constant avAdjustmentStrength cmdOption @"-avs" 0.06621990165225652
constant avv - 1 avAdjustmentStrength

#  Calibration threshold
constant calibrationThreshold cmdOption @"-cal" 0.5098892694031304
 # 0.67066     
 # 0.592

#  Input file format
stringvar inputFormatChoice;
set inputFormatChoice $cmdOptionStr @"-format" @"wav"
caseof inputFormatChoice;
 when "wav";
  set inputFormat 0
  set needToSkipWavHeader 1
 when "raw" "s8";
  set inputFormat 1
 when "s16";
  set inputFormat 0
 when "u8";
  set inputFormat 2
 when "s16stereo";
  set inputFormat 3
 otherwise
  sput _stderr "invalid input format specified, '" inputFormatChoice "'" chr$10;
  quit 1
endcase

cmdArgSetDescription @"-hps" @"High pass filter strength. From 0.0 minimum to 1.0 maximum";
cmdArgSetDescription @"-ads" @"Adaptation strength. 0.0 minimum, 1.0 maximum";
cmdArgSetDescription @"-avs" @"Zero-point adjustment strength. 0.0 minimum, 1.0 maximum";
cmdArgSetDescription @"-extraread" @"Forces enabling or disabling of calibration extra read. 0 to force disabled, 1 to force enabled";
cmdArgSetDescription @"-format" @"Select input format. Supported options are 'wav' (must be signed 16bit), 's8' (alias 'raw'), 's16', 'u8'"
cmdArgSetDescription @"-cal" @"Polarity calibration threshold value."
cmdArgSetDescription @"-stdout" @"Write decoded data to stdout."
;checkCmdArgs;

begin;

function lowpassFilter v;
 set lowpassState + (* v lowpassStrength) (* lowpassState lpv)
return lowpassState

function highpassFilter v;
 set highpassState + (* v highpassStrength) (* highpassState hpv)
return - v highpassState

function getSamp local b blah;
 increment sampleCounter
 caseof inputFormat;
  when 0; # signed 16 bit
   set b  / >> (<< (| bget fin << bget fin 8) 16) 16 256
  when 1; # signed 8 bit 
   set b  >> << bget fin 24 24
  when 2; # unsigned 8 bit
   set b  - bget fin 128
  when 3; # signed 16 bit STEREO
   set b  / >> (<< (| bget fin << bget fin 8) 16) 16 256
   if + bget fin bget fin endif
 endcase
 if saveSignal
  bput ssfp b
 endif
 #set blah bget fin
 if eof fin
  if ! quietMode
   sput _stderr "getSamp: unexpected eof" chr$10;
  endif
  failMsg
  quit 1
 endif
 set b highpassFilter b
 set b lowpassFilter b
 set av + (* av avv) * b avAdjustmentStrength
 set lastSamp b
return b

function max a b;
 if > a b
  return a
 endif
return b

function read local n;
 set n av
 set frames 0
 while ^ side > getSamp av 
  increment frames
  set n  max  abs n  abs lastSamp
 endwhile
 set side ! side
 set n - n av
 set amplitude n
 #if debugMessages
 # set sucks cat$ "frames: " str$ frames "	amplitude: " str$ amplitude; dbgmsg @sucks;
 #endif
return n;

function readBit_;
return > read threshold

function readBit local result;
 read
 set result > read threshold
 if result
  set threshold + (* amplitude 0.74  adaptationStrength) * threshold adpv
 else
  set threshold + (* amplitude 1.7  adaptationStrength) * threshold adpv
 endif
 if debugMessages
  set sucks cat$ "readBit result: " str$ result "	threshold: " str$ threshold "	av: " str$ av  "	amplitude: " str$ amplitude; dbgmsg @sucks;
 endif
return result

function readByte local out i;
 set out 0
 for i 0 7;
  set out >> out 1
  set out | out << readBit 7
 endfor
return out

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function specialCalibration local a b i v d1 d2 oa ob;
 set d1 0
 set d2 0
 set a read
 set b read
 for i 1 128;
  set oa a; set a read;
  set ob b; set b read;
  set d1 + d1 abs - oa a
  set d2 + d2 abs - ob b
 endfor
 if ! quietMode
  sput _stderr "d1: " str$ d1 chr$ 10;
  sput _stderr "d2: " str$ d2 chr$ 10;
 endif
 if || (&& (= forceExtraRead -1) > (/ d1 d2) calibrationThreshold ) > forceExtraRead 0;
  if ! quietMode
   sput _stderr "calibration: performing extra read" chr$10;
  endif
  read
 endif
 #read read read read
 readBit readBit
function skipWavHeader;
 if || (cmp$ "RIFF" (sget fin 4)) (cmp$ "WAVE" right$ (sget fin 8) 4)
  if ! quietMode
   sput _stderr "Input file is not .wav, we will try reading as input format 's8' (refer to -help)" chr$10
  endif
  set inputFormat 1
  return 0
 endif
 if cmp$ (sget fin 24) "" endif
 if cmp$ (sget fin 4) "data"
  sput _stderr "oh no, maybe this wav file is damaged or weird" chr$10;
  quit 1
 endif
 if cmp$ (sget fin 4) "" endif

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function calculateDataRate readCount local bitCount samplesPerBit bitsPerSecond;
 if quietMode endfunction endif
 set bitCount / readCount 2
 set samplesPerBit / sampleCounter bitCount
 set bitsPerSecond / sampleRate samplesPerBit
 sput _stderr "Data rate in bits per second: " str$ bitsPerSecond " (" left$ str$ (/ bitsPerSecond * 4000 / sampleRate 48000) 4 "x speed)" chr$ 10;

function begin local beginCode oldFrames oldAmp i leaderToneReadCount;
 if needToSkipWavHeader
  if debugMessages
   dbgmsg @"skipping wav header";
  endif
  skipWavHeader
 endif
 if debugMessages
  dbgmsg @"listening for the silence to end";
 endif
 while < abs lastSamp 35;
  getSamp
 endwhile
 for i 1 40;
  read
 endfor
 set threshold 0
 set sampleCounter 0
 set leaderToneReadCount 1000
 for i 1 leaderToneReadCount;
  set threshold + threshold read
 endfor
 calculateDataRate leaderToneReadCount
 set threshold * 0.75 / threshold leaderToneReadCount
 if debugMessages
  dbgmsg @"starting to listen for the start bit";
 endif
 while > amplitude threshold;
  set threshold + (* threshold 0.99) * read 0.74 0.01;
  read
 endwhile
 specialCalibration;
 while | readBit readBit readBit
 endwhile
 while ! readBit
 endwhile
 set beginCode readByte
 if != 54 beginCode
  if ! quietMode
   sput _stderr "failed to begin, got: " str$ beginCode chr$10;
  endif
  failMsg;
  quit 1
 endif
 
 readData @fileBasename;
 readData @originalFilepath;
 if ! writeToStdout
  print "File: " fileBasename;
  print "Original filepath: " originalFilepath;
 endif
 set exitOnDataError 0
 set _writeToStdout writeToStdout
 readData @fileData;
 set fout openout "recovered_file"
 sput fout fileData
 close fout;
 if dataError
  failMsg; quit 1
 else
  if ! silentMode
   sput _stderr (cat$ chr$ 0x1b "[" str$ (+ 30 62) "m") "OK" chr$10;
   resetTerminalColours _stderr
  endif
 endif

 if saveSignal
  for i 1 100;
   readBit
  endfor
 endif

 quit

# -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

function chksum data local i sum;
 set sum 0x179ab2ef
 set i 0
 while < i len$ $data
  set sum  ^  >> sum 13  << sum 7   C$data(i)
  set sum  ^  >> sum 1   << sum 30  0xe91bf2c1 ~sum
  increment i
 endwhile
return sum

function readNumber_ local i result;
 set result 0
 for i 0 3;
  set result >>> result 8
  set result | result << readByte 24
 endfor
return result

function readNumber local result b;
 set result readNumber_
 set b readNumber_
 if != b result
  if ! quietMode
   sput _stderr "number failed to read back successfully: " str$ result " " str$ b chr$10;
  endif
  failMsg
  quit 1
 endif
return result

function readData dataReturn local i sum len b;
 set sum readNumber
 set len readNumber
 set $dataReturn  string$ len chr$ 0
 set i 0
 if _writeToStdout
  while < i len
   set b readByte
   set C $dataReturn i  b
   bput _stdout b
   increment i
  endwhile
 else
  while < i len
   set C $dataReturn i  readByte
   increment i
  endwhile
 endif
 if != sum chksum dataReturn
  if ! quietMode
   sput _stderr "data failed to read back successfully" chr$10;
  endif
  if exitOnDataError
   failMsg
   quit 1
  else
   set dataError 1
  endif
 endif
endfunction

function failMsg;
 if silentMode return 0 endif
sput _stderr (cat$ chr$ 0x1b "[" str$ (+ 30 61) "m") "Failure" chr$10
;resetTerminalColours _stderr;

function dbgmsg msg;
#endfunction
sput _stderr $ msg chr$10

# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------
# --------------------------------------------------------------------

function resetTerminalColours fp local data i;
 set data @"1B 5B 21 70 1B 5B 3F 33 3B 34 6C 1B 5B 34 6C 1B 3E 1B 5B 3F 36 39 6C"
 set i 0
 while < i len$ $data
  bput fp val$ cat$ "0x" mid$ $data i 2
  set i + i 3
 endwhile
 
function initCmdArgs;
 stringvar _cmdArgDatabase;
 stringvar _cmdArgsUsed;
 set _cmdArgsUsed string$ (+ 1 _argc) vector$ 0

function checkCmdArgs local i;
 defineCmdArg @"-help" @"" -1 @"Displays the help message";
 if cmdArgIsUsed @"-help"
  cmdArgsDisplayHelp
  quit
 endif
 for i 0 + -1 _argc;
  if ! V _cmdArgsUsed i
   cmdArgsDisplayHelp
   sput _stderr "Error: unrecognised command-line argument or option: " $ i chr$10 chr$10;
   quit 1
  endif
 endfor

function cmdArgsDisplayHelp local i;
 sput _stderr "---- Command line options ----" chr$10 chr$10;
 set i 0
 while < i vlen$ _cmdArgDatabase;
  sput _stderr " " ($V$V_cmdArgDatabase(i)(0)) chr$10
  caseof (V$V_cmdArgDatabase(i)(1));
   when 0;
    sput _stderr "  Expects parameter:" chr$10 "   number" chr$10
   when 1;
    sput _stderr "  Expects parameter:" chr$10 "   string" chr$10
  endcase
  if cmp$ ($V$V_cmdArgDatabase(i)(4)) ""
   sput _stderr "  Description:" chr$10 "   " ($V$V_cmdArgDatabase(i)(4)) chr$10
  endif
  caseof (V$V_cmdArgDatabase(i)(1));
   when 0;
    sput _stderr "  Default value:" chr$10 "   "
    sput _stderr str$(V$V_cmdArgDatabase(i)(3)) chr$10
   when 1;
    if cmp$ ($V$V_cmdArgDatabase(i)(2)) ""
     sput _stderr "  Default value:" chr$10 "   "
     sput _stderr ($V$V_cmdArgDatabase(i)(2)) chr$10
    endif
   otherwise
    #sput _stderr "oh no" chr$10
  endcase
  sput _stderr chr$10
  increment i
 endwhile
 sput _stderr "------------------------------" chr$10 chr$10;

function cmdArgSetDescription argument description local i;
 set i 0
 while < i vlen$ _cmdArgDatabase;
  if ! cmp$  $V$V_cmdArgDatabase(i)(0) $argument
   set V$V_cmdArgDatabase(i)(4) description
   endfunction
  endif
  increment i
 endwhile

function defineCmdArg argument default type description local i defv;
 set i 0
 while < i vlen$ _cmdArgDatabase;
  if ! cmp$  $V$V_cmdArgDatabase(i)(0) $argument
   endfunction
  endif
  increment i
 endwhile
 if = type 0
  set defv @""
  set $defv str$ default
  set default defv
 endif
 append$ _cmdArgDatabase vector$ (S vector$ (S $argument) type (S $default) (val$ $default) description)

function cmdArgIsUsed argument local i;
 defineCmdArg argument @"" -1 @""
 for i 0 + -1 _argc;
  if ! cmp$ $i $argument
   set V _cmdArgsUsed i 1
   return 1
  endif
 endfor
return 0

function cmdOptionStr argument default local i;
 defineCmdArg argument default 1 @"";
 for i 0 + -1 _argc;
  if ! cmp$ $i $argument
   if (= i - _argc 1)
    sput _stderr "Error: command-line option '" $i "' expects a parameter" chr$10 "Try -help for more info" chr$10;
    quit 1
   endif
   set V _cmdArgsUsed i		1 
   set V _cmdArgsUsed (+ i 1)	1
   return + i 1
  endif
 endfor
return default

function cmdOption argument default local d v;
 defineCmdArg argument default 0 @"";
 set d @""
 set v cmdOptionStr argument d
 if = v d
  return default
 endif
return val$ $v